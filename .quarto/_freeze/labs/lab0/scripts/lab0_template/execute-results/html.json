{
  "hash": "78929cce5f58cac2a991af3b040f743a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 0: Getting Started with dplyr\"\nsubtitle: \"Your First Data Analysis\"\nauthor: \"Your Name Here\"\ndate: today\nformat: \n  html:\n    code-fold: false\n    toc: true\n    toc-location: left\n    theme: cosmo\nexecute:\n  warning: false\n  message: false\n---\n\n# Overview\n\nWelcome to your first lab! In this (not graded) assignment, you'll practice the fundamental dplyr operations I overviewed in class using car sales data. This lab will help you get comfortable with:\n\n- Basic data exploration\n- Column selection and manipulation  \n- Creating new variables\n- Filtering data\n- Grouping and summarizing\n\n**Instructions:** Copy this template into your portfolio repository under a `lab_0/` folder, then complete each section with your code and answers. You will write the code under the comment section in each chunk.\nBe sure to also copy the data folder into your `lab_0` folder.\n\n# Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the tidyverse library\nlibrary(tidyverse)\n\n# Read in the car sales data\n# Make sure the data file is in your lab_0/data/ folder\ncar_data <- read_csv(\"../data/car_sales_data.csv\")\n```\n:::\n\n\n# Exercise 1: Getting to Know Your Data\n\n## 1.1 Data Structure Exploration\n\nExplore the structure of your data and answer these questions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use glimpse() to see the data structure\nglimpse(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 50,000\nColumns: 7\n$ Manufacturer          <chr> \"Ford\", \"Porsche\", \"Ford\", \"Toyota\", \"VW\", \"Ford…\n$ Model                 <chr> \"Fiesta\", \"718 Cayman\", \"Mondeo\", \"RAV4\", \"Polo\"…\n$ `Engine size`         <dbl> 1.0, 4.0, 1.6, 1.8, 1.0, 1.4, 1.8, 1.4, 1.2, 2.0…\n$ `Fuel type`           <chr> \"Petrol\", \"Petrol\", \"Diesel\", \"Hybrid\", \"Petrol\"…\n$ `Year of manufacture` <dbl> 2002, 2016, 2014, 1988, 2006, 2018, 2010, 2015, …\n$ Mileage               <dbl> 127300, 57850, 39190, 210814, 127869, 33603, 866…\n$ Price                 <dbl> 3074, 49704, 24072, 1705, 4101, 29204, 14350, 30…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the column names\nnames(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Manufacturer\"        \"Model\"               \"Engine size\"        \n[4] \"Fuel type\"           \"Year of manufacture\" \"Mileage\"            \n[7] \"Price\"              \n```\n\n\n:::\n\n```{.r .cell-code}\n# Look at the first few rows\nhead(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  Manufacturer Model     `Engine size` `Fuel type` `Year of manufacture` Mileage\n  <chr>        <chr>             <dbl> <chr>                       <dbl>   <dbl>\n1 Ford         Fiesta              1   Petrol                       2002  127300\n2 Porsche      718 Caym…           4   Petrol                       2016   57850\n3 Ford         Mondeo              1.6 Diesel                       2014   39190\n4 Toyota       RAV4                1.8 Hybrid                       1988  210814\n5 VW           Polo                1   Petrol                       2006  127869\n6 Ford         Focus               1.4 Petrol                       2018   33603\n# ℹ 1 more variable: Price <dbl>\n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- How many rows and columns does the dataset have?\n- What types of variables do you see (numeric, character, etc.)?\n- Are there any column names that might cause problems? Why?\n\n**Your answers:**\n\n- Rows: 50k\n- Columns: 7  \n- Variable types: There are both character and numeric (double) types of variables\n- Problematic names: 'Engine size' 'Fuel type' and 'Year of manufacture' all have a space in them\n\n\n## 1.2 Tibble vs Data Frame\n\nCompare how tibbles and data frames display:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the tibble version (what we have)\ncar_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 7\n   Manufacturer Model    `Engine size` `Fuel type` `Year of manufacture` Mileage\n   <chr>        <chr>            <dbl> <chr>                       <dbl>   <dbl>\n 1 Ford         Fiesta             1   Petrol                       2002  127300\n 2 Porsche      718 Cay…           4   Petrol                       2016   57850\n 3 Ford         Mondeo             1.6 Diesel                       2014   39190\n 4 Toyota       RAV4               1.8 Hybrid                       1988  210814\n 5 VW           Polo               1   Petrol                       2006  127869\n 6 Ford         Focus              1.4 Petrol                       2018   33603\n 7 Ford         Mondeo             1.8 Diesel                       2010   86686\n 8 Toyota       Prius              1.4 Hybrid                       2015   30663\n 9 VW           Polo               1.2 Petrol                       2012   73470\n10 Ford         Focus              2   Diesel                       1992  262514\n# ℹ 49,990 more rows\n# ℹ 1 more variable: Price <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert to regular data frame and display\ncar_df <- as.data.frame(car_data)\nhead(car_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Manufacturer      Model Engine size Fuel type Year of manufacture Mileage\n1         Ford     Fiesta         1.0    Petrol                2002  127300\n2      Porsche 718 Cayman         4.0    Petrol                2016   57850\n3         Ford     Mondeo         1.6    Diesel                2014   39190\n4       Toyota       RAV4         1.8    Hybrid                1988  210814\n5           VW       Polo         1.0    Petrol                2006  127869\n6         Ford      Focus         1.4    Petrol                2018   33603\n  Price\n1  3074\n2 49704\n3 24072\n4  1705\n5  4101\n6 29204\n```\n\n\n:::\n:::\n\n\n**Question:** What differences do you notice in how they print?\n\n**Your answer:** The tibble automatically shows only 10 rows, and wraps the column names with spaces in them in '' marks. It also says what data type the different variables are. The data frame shows wayyyyyyy more rows by defaults and is formatted more consistently.\n\n# Exercise 2: Basic Column Operations\n\n## 2.1 Selecting Columns\n\nPractice selecting different combinations of columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select just Model and Mileage columns\ncar_df %>% select(Model, Mileage) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Model Mileage\n1     Fiesta  127300\n2 718 Cayman   57850\n3     Mondeo   39190\n4       RAV4  210814\n5       Polo  127869\n6      Focus   33603\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select Manufacturer, Price, and Fuel type\ncar_df %>% select(Manufacturer, Price, 'Fuel type') %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Manufacturer Price Fuel type\n1         Ford  3074    Petrol\n2      Porsche 49704    Petrol\n3         Ford 24072    Diesel\n4       Toyota  1705    Hybrid\n5           VW  4101    Petrol\n6         Ford 29204    Petrol\n```\n\n\n:::\n\n```{.r .cell-code}\n# Challenge: Select all columns EXCEPT Engine Size\ncar_df %>% select(-'Engine size') %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Manufacturer      Model Fuel type Year of manufacture Mileage Price\n1         Ford     Fiesta    Petrol                2002  127300  3074\n2      Porsche 718 Cayman    Petrol                2016   57850 49704\n3         Ford     Mondeo    Diesel                2014   39190 24072\n4       Toyota       RAV4    Hybrid                1988  210814  1705\n5           VW       Polo    Petrol                2006  127869  4101\n6         Ford      Focus    Petrol                2018   33603 29204\n```\n\n\n:::\n:::\n\n\n## 2.2 Renaming Columns\n\nLet's fix a problematic column name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename 'Year of manufacture' to year\ncar_data <- rename(car_data, year = 'Year of manufacture')\n\n# Check that it worked\nnames(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Manufacturer\" \"Model\"        \"Engine size\"  \"Fuel type\"    \"year\"        \n[6] \"Mileage\"      \"Price\"       \n```\n\n\n:::\n:::\n\n\n**Question:** Why did we need backticks around `Year of manufacture` but not around `year`?\n\n**Your answer:** We don't need backticks around year because it has no spaces. \n\n# Exercise 3: Creating New Columns\n\n## 3.1 Calculate Car Age\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an 'age' column (2025 minus year of manufacture)\ncar_data <- mutate(car_data, age = 2025-year)\n\n# Create a mileage_per_year column  \ncar_data <- mutate(car_data, mileage_per_year = Mileage/age)\n\n# Look at your new columns\nselect(car_data, Model, year, age, Mileage, mileage_per_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 5\n   Model       year   age Mileage mileage_per_year\n   <chr>      <dbl> <dbl>   <dbl>            <dbl>\n 1 Fiesta      2002    23  127300            5535.\n 2 718 Cayman  2016     9   57850            6428.\n 3 Mondeo      2014    11   39190            3563.\n 4 RAV4        1988    37  210814            5698.\n 5 Polo        2006    19  127869            6730.\n 6 Focus       2018     7   33603            4800.\n 7 Mondeo      2010    15   86686            5779.\n 8 Prius       2015    10   30663            3066.\n 9 Polo        2012    13   73470            5652.\n10 Focus       1992    33  262514            7955.\n# ℹ 49,990 more rows\n```\n\n\n:::\n:::\n\n\n## 3.2 Categorize Cars\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)\ncar_data <- car_data %>% mutate(price_category = case_when(\n  Price < 15000 ~ \"budget\",\n  Price >= 15000 & Price < 30000 ~ \"midrange\",\n  Price >= 30000 ~ \"luxury\"\n))\n\n\n# Check your categories select the new column and show it\nselect(car_data, price_category)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 1\n   price_category\n   <chr>         \n 1 budget        \n 2 luxury        \n 3 midrange      \n 4 budget        \n 5 budget        \n 6 midrange      \n 7 budget        \n 8 luxury        \n 9 budget        \n10 budget        \n# ℹ 49,990 more rows\n```\n\n\n:::\n:::\n\n\n# Exercise 4: Filtering Practice\n\n## 4.1 Basic Filtering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all Toyota cars\nfilter(car_data, Manufacturer == \"Toyota\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12,554 × 10\n   Manufacturer Model `Engine size` `Fuel type`  year Mileage Price   age\n   <chr>        <chr>         <dbl> <chr>       <dbl>   <dbl> <dbl> <dbl>\n 1 Toyota       RAV4            1.8 Hybrid       1988  210814  1705    37\n 2 Toyota       Prius           1.4 Hybrid       2015   30663 30297    10\n 3 Toyota       RAV4            2.2 Petrol       2007   79393 16026    18\n 4 Toyota       Yaris           1.4 Petrol       1998   97286  4046    27\n 5 Toyota       RAV4            2.4 Hybrid       2003  117425 11667    22\n 6 Toyota       Yaris           1.2 Petrol       1992  245990   720    33\n 7 Toyota       RAV4            2   Hybrid       2018   28381 52671     7\n 8 Toyota       Prius           1   Hybrid       2003  115291  6512    22\n 9 Toyota       Prius           1   Hybrid       1990  238571   961    35\n10 Toyota       Prius           1.8 Hybrid       2017   31958 38961     8\n# ℹ 12,544 more rows\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find cars with mileage less than 30,000\nfilter(car_data, Mileage<30000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,402 × 10\n   Manufacturer Model      `Engine size` `Fuel type`  year Mileage Price   age\n   <chr>        <chr>              <dbl> <chr>       <dbl>   <dbl> <dbl> <dbl>\n 1 Toyota       RAV4                 2   Hybrid       2018   28381 52671     7\n 2 VW           Golf                 2   Petrol       2020   18985 36387     5\n 3 BMW          M5                   4   Petrol       2017   22759 97758     8\n 4 Toyota       RAV4                 2.4 Petrol       2018   24588 49125     7\n 5 VW           Golf                 2   Hybrid       2018   25017 36957     7\n 6 Porsche      718 Cayman           2.4 Petrol       2021   14070 69526     4\n 7 Ford         Focus                1.8 Petrol       2020   22371 40336     5\n 8 Ford         Mondeo               1.6 Diesel       2015   21834 28435    10\n 9 VW           Passat               1.6 Diesel       2018   22122 36634     7\n10 VW           Passat               1.4 Diesel       2020   21413 39310     5\n# ℹ 5,392 more rows\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find luxury cars (from price category) with low mileage\ncar_data %>% filter(Mileage<30000) %>% filter(price_category == \"luxury\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,257 × 10\n   Manufacturer Model      `Engine size` `Fuel type`  year Mileage Price   age\n   <chr>        <chr>              <dbl> <chr>       <dbl>   <dbl> <dbl> <dbl>\n 1 Toyota       RAV4                 2   Hybrid       2018   28381 52671     7\n 2 VW           Golf                 2   Petrol       2020   18985 36387     5\n 3 BMW          M5                   4   Petrol       2017   22759 97758     8\n 4 Toyota       RAV4                 2.4 Petrol       2018   24588 49125     7\n 5 VW           Golf                 2   Hybrid       2018   25017 36957     7\n 6 Porsche      718 Cayman           2.4 Petrol       2021   14070 69526     4\n 7 Ford         Focus                1.8 Petrol       2020   22371 40336     5\n 8 VW           Passat               1.6 Diesel       2018   22122 36634     7\n 9 VW           Passat               1.4 Diesel       2020   21413 39310     5\n10 Toyota       RAV4                 2.4 Petrol       2021    6829 66031     4\n# ℹ 3,247 more rows\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n:::\n\n\n## 4.2 Multiple Conditions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find cars that are EITHER Honda OR Nissan\nfilter(car_data, Manufacturer == \"Honda\" | Manufacturer == \"Nissan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 10\n# ℹ 10 variables: Manufacturer <chr>, Model <chr>, Engine size <dbl>,\n#   Fuel type <chr>, year <dbl>, Mileage <dbl>, Price <dbl>, age <dbl>,\n#   mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find cars with price between $20,000 and $35,000\nfilter(car_data, Price >20000 & Price < 35000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,301 × 10\n   Manufacturer Model  `Engine size` `Fuel type`  year Mileage Price   age\n   <chr>        <chr>          <dbl> <chr>       <dbl>   <dbl> <dbl> <dbl>\n 1 Ford         Mondeo           1.6 Diesel       2014   39190 24072    11\n 2 Ford         Focus            1.4 Petrol       2018   33603 29204     7\n 3 Toyota       Prius            1.4 Hybrid       2015   30663 30297    10\n 4 Toyota       Prius            1.4 Hybrid       2016   43893 29946     9\n 5 Toyota       Prius            1.4 Hybrid       2016   43130 30085     9\n 6 VW           Passat           1.6 Petrol       2016   64344 23641     9\n 7 Ford         Mondeo           1.6 Diesel       2015   21834 28435    10\n 8 BMW          M5               4.4 Petrol       2008  109941 31711    17\n 9 BMW          Z4               2.2 Petrol       2014   61332 26084    11\n10 Porsche      911              3.5 Petrol       2003  107705 24378    22\n# ℹ 7,291 more rows\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find diesel cars less than 10 years old\ncar_data %>% filter(`Fuel type` == \"Diesel\" & age < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,040 × 10\n   Manufacturer Model   `Engine size` `Fuel type`  year Mileage Price   age\n   <chr>        <chr>           <dbl> <chr>       <dbl>   <dbl> <dbl> <dbl>\n 1 Ford         Fiesta            1   Diesel       2017   38370 16257     8\n 2 VW           Passat            1.6 Diesel       2018   22122 36634     7\n 3 VW           Passat            1.4 Diesel       2020   21413 39310     5\n 4 BMW          X3                2   Diesel       2018   27389 44018     7\n 5 Ford         Mondeo            2   Diesel       2016   51724 28482     9\n 6 Porsche      Cayenne           2.6 Diesel       2019   20147 76182     6\n 7 VW           Polo              1.2 Diesel       2018   37411 19649     7\n 8 Ford         Mondeo            1.8 Diesel       2016   29439 30886     9\n 9 Ford         Mondeo            1.4 Diesel       2020   18929 37720     5\n10 Ford         Mondeo            1.4 Diesel       2018   42017 28904     7\n# ℹ 2,030 more rows\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n:::\n\n\n**Question:** How many diesel cars are less than 10 years old?\n\n**Your answer:** 2040\n\n# Exercise 5: Grouping and Summarizing\n\n## 5.1 Basic Summaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average price by manufacturer\navg_price_by_brand <- car_data %>%\n  group_by(Manufacturer) %>%\n  summarize(avg_price = mean(Price, na.rm = TRUE))\n\navg_price_by_brand\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Manufacturer avg_price\n  <chr>            <dbl>\n1 BMW             24429.\n2 Ford            10672.\n3 Porsche         29104.\n4 Toyota          14340.\n5 VW              10363.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate average mileage by fuel type\navg_mileage_by_fuel_type <- car_data %>%\n  group_by(`Fuel type`) %>%\n  summarize(avg_mileage = mean(Mileage, na.rm = TRUE))\n\navg_mileage_by_fuel_type\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  `Fuel type` avg_mileage\n  <chr>             <dbl>\n1 Diesel          112667.\n2 Hybrid          111622.\n3 Petrol          112795.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Count cars by manufacturer\ncars_per_manufacturer <- car_data %>%\n  group_by(Manufacturer) %>%\n  summarize(count = n())\n\ncars_per_manufacturer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Manufacturer count\n  <chr>        <int>\n1 BMW           4965\n2 Ford         14959\n3 Porsche       2609\n4 Toyota       12554\n5 VW           14913\n```\n\n\n:::\n:::\n\n\n## 5.2 Categorical Summaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Frequency table for price categories\ncar_data %>% \n  group_by(price_category) %>%\n  summarise(frequency = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  price_category frequency\n  <chr>              <int>\n1 budget             34040\n2 luxury              6179\n3 midrange            9781\n```\n\n\n:::\n:::\n\n\n\n# Submission Notes\n\n**To submit this lab:**\n1. Make sure your code runs without errors\n2. Fill in all the \"[YOUR ANSWER]\" sections and complete all of the empty code! \n3. Save this file in your portfolio's `lab_0/` folder\n4. Commit and push to GitHub\n5. Check that it appears on your GitHub Pages portfolio site\n\n**Questions?** Post on the canvas discussion board or come to office hours!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}