{"title":"Week 4 Notes","markdown":{"yaml":{"title":"Week 4 Notes","date":"2025-09-29","editor":{"markdown":{"wrap":72}}},"headingText":"Notes","containsRefs":false,"markdown":"\n\n\n#### WHY use Spatial Analysis\n\n-   WHERE are these patterns occurring matters\n    -   Geographic clustering of problems\n    -   Spatial relationships between communities\n    -   Access to services and resources is often based on geography\n\n#### Spatial Data Fundamentals\n\n-   Two families of representing world 2-dimensionally\n    -   Vector\n        -   discrete objects -- things that have definite boundaries\n    -   Raster\n        -   Pixels\n        -   Continuous data\n\n**Vector Data Representation** - Three basic types of geometric\nrepresentations - points - lines - polygons - (kinda like illustrator)\n\n**Common Spatial Data File Formats** - Shapefile - Developed by ESRI -\nThree fundamental objects (need all three to render accurately): -\n`.shp` - stores info about the geometry - `.shx` - shape index -\n`.dbf` - names of things - Integrates with tidyverse, follows\ninernational standards - GeoJSON - All one file ! Little more - KML -\nGoogle Earth - Database connections (PostGIS)\n\n**Simple Features** - Multi-shapes -- like a broken bridge -- think\nmultiple shapes for one row of a table - Think Hawaii - -multiple shapes\nthat are all \"Hawaii\"\n\nTidyCensus gives you characteristics but no shapes, tigris gives you\nshapes but no characteristics -- must combine\n\n**Important syntax:**\n\n-   ==ggplot geom for mapping: `geom_sf()`==\n-   ==ggplot use `theme_void()` to get rid of graph backdrop==\n-   ==`st_filter()` is like `filter()` but for spatial filtering rather\n    than simple df\\`\n-   `st_union()` works like arcgis \"dissolve\"\n\n**Spatial Subsetting:** - preserves original shapes, not for doing\nsomething like finding part of a county. Rather for doing things like\nfinding a county within a list of counties, or all counties that touch a\nspecific county\n\n`neighbors <- pa_counties %>%   st_filter(allegheny, .predicate = st_touches)`\n\n-   In this example, the terminology \"st_touches\" is common across all\n    GIS\n-   `.predicate` tells `st_filter()` what kind of relationship to look\n    for, if nothing specified, then `st_intersect` is default\n\n**cheat sheet:**\n\n![cheat-sheet](Pasted%20image%2020250929121053.png)\n\n#### Coordinate Reference System (CRS)\n\n-   basic problem : world is round, maps are flat, projecting from 3d to\n    2d will necessarily cause some kind of distortion\n-   Earth is also not perfectly round, but a geoid ( a lil bumpy ), but\n    geoid is mathematically inconvenient, so the **Step 1** in\n    projection is we project from he geoid to an ==ellipsoid==, which\n    doesn't perfectly represent the geoid, but good enough, and smooth\n    -   This means there are multiple ellipsoids that fit the earth, and\n        might fit certain areas better than others\n\n![crs](Pasted%20image%2020250929122146.png)\n\n-   **Step 2** -- tie the ellipsoid to the real earth to create a\n    **Geographic (Geodetic) Coordinate System** i.e. Lat Longs\n    -   Clark, 1866, uses 'flattening' to make a nice lil ellipsoid that\n        is particularly well-fitted to North America -- Meades Ranch,\n        Kansas, is where the ellipsoid and geoid smooch :-\\*\n    -   ==North American Datum 1927== or ==NAD27==\n    -   Progress made, made a better ellipsoid than Clarke (\"We're not\n        in Kansas anymore\"), based on Earth Center instead of NA.. this\n        one called ==GRS80==\n    -   ==WGS84== -- yet another used by GPS systems\n-   **Step 3** -- take the 3d ellipsoid points and project onto 2d\n    surface\n    -   Cylindrical Projections\n\n![cylindical-projections](Pasted%20image%2020250929123131.png)\n\n```         \n    -   Line of tangency -- where the ellipsoid and the projected\n        surface smooch, all other locations will be distorted\n    -   Mercator is prime example\n    -   Bad at preserving sizes of things on 2d surface, but good at\n        preserving angles\n-   Transverse Cylindrical Projection\n    -   Good at preserving up and down (good for Chile, for example)\n    \n```\n\n![transverse](Pasted%20image%2020250929123417.png)\n\n```         \n-   Conical Projection\n    -   Good for areas concentrated in a segment of the ellipsoid,\n        like North America\n        \n```\n\n![conical](Pasted%20image%2020250929123519.png)\n\n```         \n-   Projected Coordinate System\n    -   Localized coordinate system built on a regular,\n        non-distorted grid\n    -   ==UTM== --\n```\n\n![UTM](Pasted%20image%2020250929124013.png)\n\n```         \n        -   Need to know what zone you are in -- all numbers are\n            based on grid system originating in the lower left\n            corner of the zone\n        -   No negatives\n        -   Who uses UTM ? depends on state -- if looking at a long\n            skinny area like Idaho for example\n    -   ==State Plane== (SPC)\n        -   Used in PA - Two state plane grids in PA, North and\n            South\n```\n\n![state-plane](Pasted%20image%2020250929124318.png)\n\n```         \n        -   Some states use Feet, others use Meters -- make sure to\n            check !\n-   SADD -- can't have all 4 in a projection\n    -   Shape\n    -   Area\n    -   Distance\n    -   Direction\n```\n\n-   `st_crs()` to check CRS for a dataset\n-   `st_set_crs(data, ####)` -- set CRS -- ONLY IF CRS MISSING, do NOT\n    use to transform CRS (path of despair) -- this will not change the\n    numbers themselves but rather how the computer interprets the\n    numbers, only use if `st_crs()` returns `<unknown>`\n-   `st_transform()` -- this will actually recalculate the coordinates\n    from one CRS to another\n-   In arcGIS -- this is the like the difference between \"define\n    projection\" and \"project\"\n","srcMarkdownNoYaml":"\n\n## Notes\n\n#### WHY use Spatial Analysis\n\n-   WHERE are these patterns occurring matters\n    -   Geographic clustering of problems\n    -   Spatial relationships between communities\n    -   Access to services and resources is often based on geography\n\n#### Spatial Data Fundamentals\n\n-   Two families of representing world 2-dimensionally\n    -   Vector\n        -   discrete objects -- things that have definite boundaries\n    -   Raster\n        -   Pixels\n        -   Continuous data\n\n**Vector Data Representation** - Three basic types of geometric\nrepresentations - points - lines - polygons - (kinda like illustrator)\n\n**Common Spatial Data File Formats** - Shapefile - Developed by ESRI -\nThree fundamental objects (need all three to render accurately): -\n`.shp` - stores info about the geometry - `.shx` - shape index -\n`.dbf` - names of things - Integrates with tidyverse, follows\ninernational standards - GeoJSON - All one file ! Little more - KML -\nGoogle Earth - Database connections (PostGIS)\n\n**Simple Features** - Multi-shapes -- like a broken bridge -- think\nmultiple shapes for one row of a table - Think Hawaii - -multiple shapes\nthat are all \"Hawaii\"\n\nTidyCensus gives you characteristics but no shapes, tigris gives you\nshapes but no characteristics -- must combine\n\n**Important syntax:**\n\n-   ==ggplot geom for mapping: `geom_sf()`==\n-   ==ggplot use `theme_void()` to get rid of graph backdrop==\n-   ==`st_filter()` is like `filter()` but for spatial filtering rather\n    than simple df\\`\n-   `st_union()` works like arcgis \"dissolve\"\n\n**Spatial Subsetting:** - preserves original shapes, not for doing\nsomething like finding part of a county. Rather for doing things like\nfinding a county within a list of counties, or all counties that touch a\nspecific county\n\n`neighbors <- pa_counties %>%   st_filter(allegheny, .predicate = st_touches)`\n\n-   In this example, the terminology \"st_touches\" is common across all\n    GIS\n-   `.predicate` tells `st_filter()` what kind of relationship to look\n    for, if nothing specified, then `st_intersect` is default\n\n**cheat sheet:**\n\n![cheat-sheet](Pasted%20image%2020250929121053.png)\n\n#### Coordinate Reference System (CRS)\n\n-   basic problem : world is round, maps are flat, projecting from 3d to\n    2d will necessarily cause some kind of distortion\n-   Earth is also not perfectly round, but a geoid ( a lil bumpy ), but\n    geoid is mathematically inconvenient, so the **Step 1** in\n    projection is we project from he geoid to an ==ellipsoid==, which\n    doesn't perfectly represent the geoid, but good enough, and smooth\n    -   This means there are multiple ellipsoids that fit the earth, and\n        might fit certain areas better than others\n\n![crs](Pasted%20image%2020250929122146.png)\n\n-   **Step 2** -- tie the ellipsoid to the real earth to create a\n    **Geographic (Geodetic) Coordinate System** i.e. Lat Longs\n    -   Clark, 1866, uses 'flattening' to make a nice lil ellipsoid that\n        is particularly well-fitted to North America -- Meades Ranch,\n        Kansas, is where the ellipsoid and geoid smooch :-\\*\n    -   ==North American Datum 1927== or ==NAD27==\n    -   Progress made, made a better ellipsoid than Clarke (\"We're not\n        in Kansas anymore\"), based on Earth Center instead of NA.. this\n        one called ==GRS80==\n    -   ==WGS84== -- yet another used by GPS systems\n-   **Step 3** -- take the 3d ellipsoid points and project onto 2d\n    surface\n    -   Cylindrical Projections\n\n![cylindical-projections](Pasted%20image%2020250929123131.png)\n\n```         \n    -   Line of tangency -- where the ellipsoid and the projected\n        surface smooch, all other locations will be distorted\n    -   Mercator is prime example\n    -   Bad at preserving sizes of things on 2d surface, but good at\n        preserving angles\n-   Transverse Cylindrical Projection\n    -   Good at preserving up and down (good for Chile, for example)\n    \n```\n\n![transverse](Pasted%20image%2020250929123417.png)\n\n```         \n-   Conical Projection\n    -   Good for areas concentrated in a segment of the ellipsoid,\n        like North America\n        \n```\n\n![conical](Pasted%20image%2020250929123519.png)\n\n```         \n-   Projected Coordinate System\n    -   Localized coordinate system built on a regular,\n        non-distorted grid\n    -   ==UTM== --\n```\n\n![UTM](Pasted%20image%2020250929124013.png)\n\n```         \n        -   Need to know what zone you are in -- all numbers are\n            based on grid system originating in the lower left\n            corner of the zone\n        -   No negatives\n        -   Who uses UTM ? depends on state -- if looking at a long\n            skinny area like Idaho for example\n    -   ==State Plane== (SPC)\n        -   Used in PA - Two state plane grids in PA, North and\n            South\n```\n\n![state-plane](Pasted%20image%2020250929124318.png)\n\n```         \n        -   Some states use Feet, others use Meters -- make sure to\n            check !\n-   SADD -- can't have all 4 in a projection\n    -   Shape\n    -   Area\n    -   Distance\n    -   Direction\n```\n\n-   `st_crs()` to check CRS for a dataset\n-   `st_set_crs(data, ####)` -- set CRS -- ONLY IF CRS MISSING, do NOT\n    use to transform CRS (path of despair) -- this will not change the\n    numbers themselves but rather how the computer interprets the\n    numbers, only use if `st_crs()` returns `<unknown>`\n-   `st_transform()` -- this will actually recalculate the coordinates\n    from one CRS to another\n-   In arcGIS -- this is the like the difference between \"define\n    projection\" and \"project\"\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"week-04-notes.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":"cosmo","title":"Week 4 Notes","date":"2025-09-29","editor":{"markdown":{"wrap":72}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}