```{r setup}
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("../data/car_sales_data.csv")
View(car_data)
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
names(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
car_data
car_df
# Select just Model and Mileage columns
select(car_df, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_df, Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_df, -'Engine Size')
names(car_df)
# Challenge: Select all columns EXCEPT Engine Size
select(car_df, -'Engine size')
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, 'Year of manufacture', year)
rename()
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, 'Year of manufacture' == year)
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, c('Year of manufacture' == year))
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, 'Year of manufacture' = year)
names(car_data)
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, year = 'Year of manufacture')
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025-year)
names(car_data)
head(car_data)
# Create a mileage_per_year column
car_data <- mutate(car_data, mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = "hi")
head(car_data)
select(car_data, price_category)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
price < 15000 ~ "budget",
price >= 15000 & price < 30000 ~ "midrange",
price >= 30000 ~ "high midrange"
))
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & price < 30000 ~ "midrange",
Price >= 30000 ~ "high midrange"
))
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
Price >= 30000 ~ "high midrange"
))
# Check your categories select the new column and show it
select(car_data, price_category)
names(car_data)
# Find all Toyota cars
filter(car_data, Manufacturer = "Toyota")
# Find all Toyota cars
filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
filter(car_data, Mileage<30000)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
Price >= 30000 ~ "luxury"
))
# Find luxury cars (from price category) with low mileage
car_data %>% filter(Mileage<30000) %>% filter(price_category == "luxury")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | "Nissan")
Manufacturer ==
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
head(car_data)
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Honda")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Toyota")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
filter(car_data, Price >20000 & Price < 35000)
# Find diesel cars less than 10 years old
car_data %>% filter(`Fuel type` == "Diesel" & age < 10)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
# Calculate average mileage by fuel type
avg_mileage_by_fuel_type <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_mileage_by_fuel_type
# Count cars by manufacturer
cars_per_manufacturer <- car_data %>%
group_by(Manufacturer) %>%
summarize(count = n())
cars_per_manufacturer
# Frequency table for price categories
car_data %>%
group_by(price_category) %>%
summarise(frequency = n())
head(car_df)
# Select just Model and Mileage columns
car_df %>% select (Model, Mileage) %>% head()
# Select Manufacturer, Price, and Fuel type
car_df %>% (Manufacturer, Price, 'Fuel type') %>% head()
# Select Manufacturer, Price, and Fuel type
car_df %>% select(Manufacturer, Price, 'Fuel type') %>% head()
# Challenge: Select all columns EXCEPT Engine Size
car_df %>% select(-'Engine size') %>% head()
#load libraries
library(tidycensus)
library(tidyverse)
library(knitr)
# Set API key (you'll get yours for Lab 1)
census_api_key("47d7ac5fc6fea73d0b5c6df507601e4268de5a6e")
# Set API key (you'll get yours for Lab 1)
census_api_key("47d7ac5fc6fea73d0b5c6df507601e4268de5a6e", install=TRUE)
# Get state-level population data
state_pop <- get_acs(
geography = "state",
variables = "B01003_001",  # Total population
year = 2022,
survey = "acs5"
)
View(state_pop)
# Get income and population for Pennsylvania counties
pa_data <- get_acs(
geography = "county",
variables = c(
total_pop = "B01003_001", #automatically rename the variable
median_income = "B19013_001"
),
state = "PA",
year = 2022,
output = "wide"  # Makes analysis easier
)
View(pa_data)
pa_clean <- pa_data %>%
mutate(
# Remove state name from county names
county_name = str_remove(NAME, ", Pennsylvania"),
# Remove "County" word
county_name = str_remove(county_name, " County")
)
# Compare before and after
select(pa_clean, NAME, county_name)
pa_reliability <- pa_clean %>%
mutate(
# Calculate MOE as percentage of estimate
moe_percentage = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percentage < 5 ~ "High Confidence",
moe_percentage >= 5 & moe_percentage <= 10 ~ "Moderate",
moe_percentage > 10 ~ "Low Confidence"
)
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
library(knitr)
# Set your Census API key
census_api_key(Sys.getenv("47d7ac5fc6fea73d0b5c6df507601e4268de5a6e"))
# Choose your state for analysis - assign it to a variable called my_state
my_state <- 'Michigan'
# Write your get_acs() code here
mi_county_pop_income <- get_acs(
geography = "county",
variables = c("B19013_001","B01003_001"),
state = "MI",
year = 2022,
output= "wide")
View(mi_county_pop_income)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(NAME = str_remove(NAME, "County, Michigan"))
# Write your get_acs() code here
mi_county_pop_income <- get_acs(
geography = "county",
variables = c("B19013_001","B01003_001"),
state = "MI",
year = 2022,
output= "wide")
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(NAME = str_remove(NAME, "County, Michigan"))
# Display the first few rows
head(mi_county_pop_income)
# Write your get_acs() code here
mi_county_pop_income <- get_acs(
geography = "county",
variables = c(median_household_income = "B19013_001",total_pop = "B01003_001"),
state = "MI",
year = 2022,
output= "wide")
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(NAME = str_remove(NAME, "County, Michigan"))
# Display the first few rows
head(mi_county_pop_income)
# Calculate MOE percentage and reliability categories using mutate()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(
pop_moe_percent = (total_popM/total_popE)*100,
income_moe_percent = (median_household_incomeM/ median_household_incomeE)*100
)
# Write your get_acs() code here
mi_county_pop_income <- get_acs(
geography = "county",
variables = c(median_household_income = "B19013_001",total_pop = "B01003_001"),
state = "MI",
year = 2022,
output= "wide",
survey = "acs5")
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(NAME = str_remove(NAME, "County, Michigan"))
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(NAME = str_remove(NAME, " County, Michigan"))
# Calculate MOE percentage and reliability categories using mutate()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(
income_moe_percent = (median_household_incomeM/ median_household_incomeE)*100
)
# Calculate MOE percentage and reliability categories using mutate()
mi_county_pop_income <- mi_county_pop_income %>%
mutate(
income_moe_percent = (median_household_incomeM/ median_household_incomeE)*100
) %>%
mutate(
income_e_reliability = case_when(
income_moe_percent < 5 ~ "High Confidence",
income_moe_percent >=5 & income_moe_percent <= 10 ~ "Moderate Confidence",
income_moe_percent > 10 ~ "Low Confidence"
)
) %>%
mutate(
unreliable_income_e = case_when(
income_e_reliability == "Low Confidence" ~ TRUE,
TRUE ~ FALSE
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(n())
View(income_reliability_summary)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(count = n())
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(count = n()) %>%
mutate(
percent_of_counties = count/ count(count)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(count = n()) %>%
mutate(
percent_of_counties = count/ count(`count`)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
mutate(
percent_of_counties = num_counties/ count(num_counties)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
#mutate(
#  percent_of_counties = num_counties/ count(num_counties)
#)
```
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n())
mutate(
percent_of_counties = num_counties/ 83
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
mutate(
percent_of_counties = num_counties/ 83
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
mutate(
percent_of_counties = (num_counties/ 83) *100
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
mutate(
percent_of_counties = (num_counties/ count()) *100
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
mutate(
percent_of_counties = (num_counties/ count(income_e_reliability)) *100
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
income_reliability_summary <- mi_county_pop_income %>%
group_by(income_e_reliability) %>%
summarise(num_counties = n()) %>%
mutate(
percent_of_counties = (num_counties/ sum(num_counties)) *100
)
- Data -> Aesthetics -> Geometries -> Visual
- Data -> Aesthetics -> Geometries -> Visual
library(ggplot2)
library(tidycensus)
library(tidyverse)
# Set your Census API key if you haven't already
census_api_key(Sys.getenv("CENSUS_API_KEY"))
# Set your Census API key if you haven't already
census_api_key(Sys.getenv("47d7ac5fc6fea73d0b5c6df507601e4268de5a6e"))
# Get some census data for demonstration
demo_data <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "PA",
year = 2022,
output = "wide"
) %>%
mutate(county_name = str_remove(NAME, ", Pennsylvania"))
# Basic scatter plot
ggplot(demo_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point()
##Improving Plots with Labels & Themes
ggplot(demo_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE) +
labs(
title = "Income vs Population in Pennsylvania Counties",
subtitle = "2018-2022 ACS 5-Year Estimates",
x = "Total Population",
y = "Median Household Income ($)",
caption = "Source: U.S. Census Bureau ACS"
) +
theme_minimal() +
scale_y_continuous(labels = scales::dollar) +
scale_x_continuous(labels = scales::comma)
