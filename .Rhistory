#| eval: true
#| fig-width: 10
#| fig-height: 4
# Create example data with clear pattern
set.seed(123)
x <- seq(0, 10, 0.5)
y <- 2 + 0.5*x + rnorm(length(x), 0, 1)
example_data <- data.frame(x = x, y = y)
# Three models
p1 <- ggplot(example_data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ 1, se = FALSE) +
labs(title = "Underfitting", subtitle = "Ignores relationship") +
theme_minimal()
p2 <- ggplot(example_data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Good Fit", subtitle = "Captures true pattern") +
theme_minimal()
p3 <- ggplot(example_data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 10), se = FALSE) +
labs(title = "Overfitting", subtitle = "Follows noise") +
theme_minimal()
library(patchwork)
p1 | p2 | p3
#| echo: true
#| eval: true
set.seed(123)
n <- nrow(pa_data)
# 70% training, 30% testing
train_indices <- sample(1:n, size = 0.7 * n)
train_data <- pa_data[train_indices, ]
test_data <- pa_data[-train_indices, ]
# Fit on training data only
model_train <- lm(median_incomeE ~ total_popE, data = train_data)
# Predict on test data
test_predictions <- predict(model_train, newdata = test_data)
#| echo: true
#| eval: true
# Calculate prediction error (RMSE)
rmse_test <- sqrt(mean((test_data$median_incomeE - test_predictions)^2))
rmse_train <- summary(model_train)$sigma
cat("Training RMSE:", round(rmse_train, 0), "\n")
cat("Test RMSE:", round(rmse_test, 0), "\n")
#| echo: true
#| eval: true
library(caret)
install.packages("caret")
#| eval: false
#| echo: true
challenge_data <- get_acs(
geography = "county",
state = "PA",
variables = c(
home_value = "B25077_001",      # YOUR TARGET
total_pop = "B01003_001",       # Total population
median_income = "B19013_001",   # Median household income
median_age = "B01002_001",      # Median age
percent_college = "B15003_022", # Bachelor's degree or higher
median_rent = "B25058_001",     # Median rent
poverty_rate = "B17001_002"     # Population in poverty
),
year = 2022,
output = "wide"
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
# Manual fill scale for hospital 'type'
# scale_fill_manual(
#  values = c("Hospital" = "#FF8600"),  # orange fill for hospital points
#  guide = guide_legend(override.aes = list(shape = 21, size = 4, color = "#FF8600")),
#  name = "Legend"
#) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
# Load required packages
library(sf)
library(tidyverse)
library(ggplot2)
library(tigris)
library(tidycensus)
library(patchwork)
library(units)
library(knitr)
library(ggspatial)
census_api_key("42bf8a20a3df1def380f330cf7edad0dd5842ce6")
# Load spatial data
pa_counties <- st_read("data/Pennsylvania_County_Boundaries.shp")
hospitals <- st_read("data/hospitals.geojson")
census_tracts <- tracts(state = "PA", cb = TRUE)
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
hospitals <- st_transform(hospitals, st_crs(pa_counties))
# Check that all data loaded correctly
glimpse(pa_counties)
glimpse(census_tracts)
glimpse(hospitals)
# With ggplot2
p1 <- ggplot(pa_counties) +
geom_sf() +
theme_void()
p2 <- ggplot(census_tracts) +
geom_sf() +
theme_void()
p3 <- ggplot(hospitals) +
geom_sf() +
theme_void()
p1 | p2 | p3
# Get demographic data from ACS
pa_tracts_data <- get_acs(
geography = "tract",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001",
over_65 = "B01001_020"  # Population 65 years and over
),
state = "PA",
year = 2023,
output = "wide"
)
# Join to tract boundaries
census_tracts <- census_tracts %>%
left_join(pa_tracts_data, by= "GEOID")
summary(census_tracts)
# Filter for vulnerable tracts based on your criteria
vulnerable_tracts <- census_tracts %>%
filter(median_incomeE < 42398 | (over_65E/total_popE) > .017)
#convert to Albers
vulnerable_tracts <- st_transform(vulnerable_tracts, crs = 5070)
hospitals <- st_transform(hospitals, crs = 5070)
# Calculate distance from each tract centroid to nearest hospital
tract_centroids <- st_centroid(vulnerable_tracts)
nearest_hospital <- st_nearest_feature(tract_centroids, hospitals)
vulnerable_tracts <- vulnerable_tracts %>%
mutate(nearest_hospital_geom = hospitals$geometry[nearest_hospital])
vulnerable_tracts <- vulnerable_tracts %>%
mutate(distance_to_nearst_hospital = set_units(st_distance(tract_centroids, vulnerable_tracts$nearest_hospital_geom, by_element = TRUE), "mi"))
summary(vulnerable_tracts$distance_to_nearst_hospital)
# Create underserved variable
vulnerable_tracts <- vulnerable_tracts %>%
mutate(underserved = ifelse(as.numeric(distance_to_nearst_hospital) > 15,"Underserved",""))
vulnerable_tracts %>%
group_by(underserved)%>%
summarise(n())
# Spatial join tracts to counties
pa_counties <- pa_counties %>% st_transform(st_crs(vulnerable_tracts))
vulnerable_per_county <- vulnerable_tracts %>%
st_join(pa_counties) %>%
st_drop_geometry()
# Aggregate statistics by county
vulnerable_per_county_stats <- vulnerable_per_county %>%
group_by(COUNTY_NAM) %>%
summarise(
num_vulnerable_tracts = n(),
num_underserved_tracts = sum(underserved == "Underserved"),
percent_underserved = sum(underserved == "Underserved")/n(),
avg_distance_to_nearst_hospital = mean(distance_to_nearst_hospital),
total_pop = sum(total_popE),
total_underserved_pop = sum(ifelse(underserved == "Underserved", total_popE, 0))
)
# Create and format priority counties table
vulnerable_per_county_stats %>%
arrange(desc(total_underserved_pop)) %>%
slice_head(n = 10) %>%
select(
c("COUNTY_NAM", "total_underserved_pop", "percent_underserved", "avg_distance_to_nearst_hospital")
) %>%
mutate(
avg_distance_to_nearst_hospital = as.numeric(avg_distance_to_nearst_hospital),
percent_underserved = paste0(round(percent_underserved*100, 2), "%")
)%>%
kable(
col.names = c("County", "Total Underserved Population", "Percent of County made up of Underserved Tracts", "Average Distance of to Nearest Hospital"),
digit = 1,
format.args = list(big.mark = ","),
align = "l",
caption = "10 Counties in PA with the Highest Absolute Population more than 15 miles from Nearest Hospital"
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
# Manual fill scale for hospital 'type'
# scale_fill_manual(
#  values = c("Hospital" = "#FF8600"),  # orange fill for hospital points
#  guide = guide_legend(override.aes = list(shape = 21, size = 4, color = "#FF8600")),
#  name = "Legend"
#) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
#aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
# Manual fill scale for hospital 'type'
# scale_fill_manual(
#  values = c("Hospital" = "#FF8600"),  # orange fill for hospital points
#  guide = guide_legend(override.aes = list(shape = 21, size = 4, color = "#FF8600")),
#  name = "Legend"
#) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
# Create county-level access map
vulnerable_per_county_stats <- vulnerable_per_county_stats %>%
left_join(pa_counties, by="COUNTY_NAM")
vulnerable_per_county_stats <- vulnerable_per_county_stats %>%
st_as_sf() %>%
st_transform(st_crs(census_tracts)) %>%
mutate(percent_underserved = percent_underserved*100
)
hospitals <- hospitals %>%
mutate(type = "Hospital")
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
#aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
# Manual fill scale for hospital 'type'
# scale_fill_manual(
#  values = c("Hospital" = "#FF8600"),  # orange fill for hospital points
#  guide = guide_legend(override.aes = list(shape = 21, size = 4, color = "#FF8600")),
#  name = "Legend"
#) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
# Manual fill scale for hospital 'type'
scale_fill_manual(
values = c("Hospital" = "#FF8600"),  # orange fill for hospital points
guide = guide_legend(override.aes = list(shape = 21, size = 4, color = "#FF8600")),
name = "Legend"
) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
rlang::last_trace()
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
aes(fill = type),       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
# Manual fill scale for hospital 'type'
scale_fill_manual(
values = c("Hospital" = "#FF8600"),  # orange fill for hospital points
guide = guide_legend(override.aes = list(shape = 21, size = 4, color = "#FF8600")),
name = "Legend"
) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
fill = "#FF8600",       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = "Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
ggplot(vulnerable_per_county_stats) +
geom_sf(aes(fill = percent_underserved)) +
scale_fill_gradient(
low = "#C3CDFE",    # light periwinkle
high = "#485EFE",   # dark periwinkle
name = "Underserved Tracts per County (%)"
) +
geom_sf(
data = hospitals,
fill = "#FF8600",       # map fill to type, triggers legend
size = 3,
shape = 21,
color = "#FF8600",      # outline color stays fixed
stroke = 0.8
) +
labs(
title = "Underserved Tracts per Counties in Pennsylvania",
subtitle = str_wrap("Where and underserved tract is one where the center is at least 15 miles from the nearest hospital",50),
caption ="Data Sources: "
) +
annotation_north_arrow(
location = "tr",
which_north = "true",
style = north_arrow_fancy_orienteering
) +
theme_void() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0.5, size = 9, margin = margin(t = 10))
)
