```{r setup}
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("../data/car_sales_data.csv")
View(car_data)
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
names(car_data)
# Look at the first few rows
head(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
car_data
car_df
# Select just Model and Mileage columns
select(car_df, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
select(car_df, Manufacturer, Price, 'Fuel type')
# Challenge: Select all columns EXCEPT Engine Size
select(car_df, -'Engine Size')
names(car_df)
# Challenge: Select all columns EXCEPT Engine Size
select(car_df, -'Engine size')
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, 'Year of manufacture', year)
rename()
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, 'Year of manufacture' == year)
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, c('Year of manufacture' == year))
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, 'Year of manufacture' = year)
names(car_data)
# Rename 'Year of manufacture' to year
car_data <- rename(car_data, year = 'Year of manufacture')
# Check that it worked
names(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025-year)
names(car_data)
head(car_data)
# Create a mileage_per_year column
car_data <- mutate(car_data, mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = "hi")
head(car_data)
select(car_data, price_category)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
price < 15000 ~ "budget",
price >= 15000 & price < 30000 ~ "midrange",
price >= 30000 ~ "high midrange"
))
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & price < 30000 ~ "midrange",
Price >= 30000 ~ "high midrange"
))
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
Price >= 30000 ~ "high midrange"
))
# Check your categories select the new column and show it
select(car_data, price_category)
names(car_data)
# Find all Toyota cars
filter(car_data, Manufacturer = "Toyota")
# Find all Toyota cars
filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
filter(car_data, Mileage<30000)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>% mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
Price >= 30000 ~ "luxury"
))
# Find luxury cars (from price category) with low mileage
car_data %>% filter(Mileage<30000) %>% filter(price_category == "luxury")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | "Nissan")
Manufacturer ==
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda" | Manufacturer == "Nissan")
head(car_data)
# Find cars that are EITHER Honda OR Nissan
car_data %>% filter(Manufacturer == "Honda")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Honda")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Nissan")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Toyota")
# Find cars that are EITHER Honda OR Nissan
filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
filter(car_data, Price >20000 & Price < 35000)
# Find diesel cars less than 10 years old
car_data %>% filter(`Fuel type` == "Diesel" & age < 10)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
# Calculate average mileage by fuel type
avg_mileage_by_fuel_type <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_mileage_by_fuel_type
# Count cars by manufacturer
cars_per_manufacturer <- car_data %>%
group_by(Manufacturer) %>%
summarize(count = n())
cars_per_manufacturer
# Frequency table for price categories
car_data %>%
group_by(price_category) %>%
summarise(frequency = n())
head(car_df)
# Select just Model and Mileage columns
car_df %>% select (Model, Mileage) %>% head()
# Select Manufacturer, Price, and Fuel type
car_df %>% (Manufacturer, Price, 'Fuel type') %>% head()
# Select Manufacturer, Price, and Fuel type
car_df %>% select(Manufacturer, Price, 'Fuel type') %>% head()
# Challenge: Select all columns EXCEPT Engine Size
car_df %>% select(-'Engine size') %>% head()
#load libraries
library(tidycensus)
library(tidyverse)
library(knitr)
# Set API key (you'll get yours for Lab 1)
census_api_key("47d7ac5fc6fea73d0b5c6df507601e4268de5a6e")
# Set API key (you'll get yours for Lab 1)
census_api_key("47d7ac5fc6fea73d0b5c6df507601e4268de5a6e", install=TRUE)
# Get state-level population data
state_pop <- get_acs(
geography = "state",
variables = "B01003_001",  # Total population
year = 2022,
survey = "acs5"
)
View(state_pop)
# Get income and population for Pennsylvania counties
pa_data <- get_acs(
geography = "county",
variables = c(
total_pop = "B01003_001", #automatically rename the variable
median_income = "B19013_001"
),
state = "PA",
year = 2022,
output = "wide"  # Makes analysis easier
)
View(pa_data)
pa_clean <- pa_data %>%
mutate(
# Remove state name from county names
county_name = str_remove(NAME, ", Pennsylvania"),
# Remove "County" word
county_name = str_remove(county_name, " County")
)
# Compare before and after
select(pa_clean, NAME, county_name)
pa_reliability <- pa_clean %>%
mutate(
# Calculate MOE as percentage of estimate
moe_percentage = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percentage < 5 ~ "High Confidence",
moe_percentage >= 5 & moe_percentage <= 10 ~ "Moderate",
moe_percentage > 10 ~ "Low Confidence"
)
)
